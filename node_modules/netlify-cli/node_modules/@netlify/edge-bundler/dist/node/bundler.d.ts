import { OnAfterDownloadHook, OnBeforeDownloadHook } from './bridge.js';
import { Declaration } from './declaration.js';
import { EdgeFunction } from './edge_function.js';
import { FeatureFlags } from './feature_flags.js';
import { ImportMapFile } from './import_map.js';
import { Layer } from './layer.js';
import { LogFunction } from './logger.js';
interface BundleOptions {
    basePath?: string;
    cacheDirectory?: string;
    debug?: boolean;
    distImportMapPath?: string;
    featureFlags?: FeatureFlags;
    importMaps?: ImportMapFile[];
    layers?: Layer[];
    onAfterDownload?: OnAfterDownloadHook;
    onBeforeDownload?: OnBeforeDownloadHook;
    systemLogger?: LogFunction;
}
declare const bundle: (sourceDirectories: string[], distDirectory: string, tomlDeclarations?: Declaration[], { basePath: inputBasePath, cacheDirectory, debug, distImportMapPath, featureFlags: inputFeatureFlags, importMaps, layers, onAfterDownload, onBeforeDownload, systemLogger, }?: BundleOptions) => Promise<{
    functions: EdgeFunction[];
    manifest: import("./manifest.js").Manifest;
}>;
export { bundle };
export type { BundleOptions };
